{"version":3,"file":"static/js/134.55b3d344.chunk.js","mappings":"uKAAO,IAAMA,EAAU,CACrBC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,8N,wJC6GN,UArGe,SAAC,GAAsB,IAAD,EAAnBC,EAAmB,EAAnBA,aAChB,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAEMC,EAAW,UAAGL,EAAaM,IAAI,iBAApB,QAAiC,GAE5CC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,GAAKJ,EAAL,CAEA,IAAMK,EAAiB,mCAAG,6FACxBZ,GAAa,GADW,kBAIJa,MAAM,mDAAD,OAC8BN,EAD9B,8CAErBZ,EAAAA,GANoB,YAIhBmB,EAJgB,QAQdC,GARc,iCASDD,EAAIE,OATH,cASdC,EATc,yBAUbA,GAVa,cAYhB,IAAIC,MAAM,SAZM,kCActBC,EAAAA,GAAAA,MAAA,UACK,KAAMC,QADX,6DAdsB,yBAkBtBpB,GAAa,GAlBS,6EAAH,qDAsBvBY,IAAoBS,MAAK,SAAAP,GACvB,OAA4B,KAArB,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKQ,QAAQC,SACfpB,EAAgB,CAAC,GACjBG,EAAiB,IACVa,EAAAA,GAAAA,KAAA,kCAAsCZ,EAAtC,OAEFD,EAAgB,OAACQ,QAAD,IAACA,OAAD,EAACA,EAAKQ,QAC9B,GA/BuB,CAgCzB,GAAE,CAACf,EAAaP,EAAcG,IAe/B,OACE,4BACE,SAAC,KAAD,CAAiBqB,GAAG,IAApB,SAAwB,2BACxB,kBAAMC,SAhBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAC2B,KAAtCH,EAAEI,OAAOC,SAAS,GAAGC,MAAMC,OAC7B9B,EAAgB,CAAE+B,OAAQR,EAAEI,OAAOC,SAAS,GAAGC,SAE/C7B,EAAgB,CAAC,GACjBG,EAAiB,IACjBa,EAAAA,GAAAA,KAAW,yCAGbS,EAAKO,OACN,EAIG,WACE,SAAC,KAAD,CACEC,KAAK,OACLC,YAAY,2BACZC,WAAS,EACTC,KAAK,YAEP,SAAC,KAAD,CAAWH,KAAK,SAAhB,SAAyB,eAGb,OAAb/B,QAAa,IAAbA,OAAA,EAAAA,EAAekB,QAAS,IACvB,eAAIiB,MAAO,CAAEC,QAAS,OAAQC,SAAU,OAAQC,IAAK,IAArD,SACGtC,EAAcuC,KACb,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,MAAOR,EAA5B,EAA4BA,KAAMS,EAAlC,EAAkCA,cAAeC,EAAjD,EAAiDA,YAAjD,OACE,UAAC,KAAD,CAEEzB,GAAE,kBAAaqB,GACfK,MAAO,CAAEC,KAAM1C,GAHjB,WAKE,gBACE2C,QAAQ,OACRC,IACEJ,GAAeD,EAAf,6CAEMC,GAAeD,GAEjBM,EAENC,IAAKR,GAASR,EACdiB,MAAO,OAET,eAAIhB,MAAO,CAAEiB,SAAU,KAAvB,SAA+BV,GAASR,IACvCmB,OAAOZ,GAAca,UAAU,EAAG,KAjB9Bd,EAFT,QA2BX,C","sources":["api/api.js","pages/Movies.jsx"],"sourcesContent":["export const OPTIONS = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5OWUzM2Q5ZjIwZjlhNmU0ZTcxNGU2N2FlM2JjZTdhNSIsInN1YiI6IjY0Nzg5ZjI1MDc2Y2U4MDEyOGZiY2NmMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.fgp-whkIrWAK4eHf9B-LgEQ9c39n98ES3eZ_2XSy_lo',\n  },\n};\n","import { OPTIONS } from 'api/api';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\nimport NoImg from '../img/no-image.png';\nimport { toast } from 'react-toastify';\nimport {\n  SearchBtn,\n  StyledInput,\n  StyledLinkHome,\n  StyledLinkMovie,\n} from 'components/Styled';\n\nconst Movies = ({ setIsLoading }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchResults, setSearchResults] = useState([]);\n\n  const searchQuery = searchParams.get('search') ?? '';\n\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!searchQuery) return;\n\n    const fetchSearchMovies = async () => {\n      setIsLoading(true);\n\n      try {\n        const res = await fetch(\n          `https://api.themoviedb.org/3/search/movie?query=${searchQuery}&include_adult=false&language=en-US&page=1`,\n          OPTIONS\n        );\n        if (res.ok) {\n          const data = await res.json();\n          return data;\n        }\n        throw new Error('Opps!');\n      } catch (error) {\n        toast.error(\n          `${error.message} Something go wrong, please try again later ðŸ˜’`\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchSearchMovies().then(res => {\n      if (res?.results.length === 0) {\n        setSearchParams({});\n        setSearchResults([]);\n        return toast.warn(`Nothing found matching \"${searchQuery}\"`);\n      }\n      return setSearchResults(res?.results);\n    });\n  }, [searchQuery, setIsLoading, setSearchParams]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    if (e.target.elements[0].value.trim() !== '') {\n      setSearchParams({ search: e.target.elements[0].value });\n    } else {\n      setSearchParams({});\n      setSearchResults([]);\n      toast.info('You should enter search query first!');\n    }\n\n    form.reset();\n  };\n  return (\n    <div>\n      <StyledLinkMovie to=\"/\">Back to previous page</StyledLinkMovie>\n      <form onSubmit={handleSubmit}>\n        <StyledInput\n          type=\"text\"\n          placeholder=\"Enter movie to search...\"\n          autoFocus\n          name=\"search\"\n        />\n        <SearchBtn type=\"submit\">Search</SearchBtn>\n      </form>\n\n      {searchResults?.length > 0 && (\n        <ul style={{ display: 'flex', flexWrap: 'wrap', gap: 15 }}>\n          {searchResults.map(\n            ({ id, release_date, title, name, backdrop_path, poster_path }) => (\n              <StyledLinkHome\n                key={id}\n                to={`/movies/${id}`}\n                state={{ from: location }}\n              >\n                <img\n                  loading=\"lazy\"\n                  src={\n                    poster_path || backdrop_path\n                      ? `https://image.tmdb.org/t/p/original${\n                          poster_path || backdrop_path\n                        }`\n                      : NoImg\n                  }\n                  alt={title || name}\n                  width={200}\n                />\n                <h4 style={{ maxWidth: 200 }}>{title || name}</h4>\n                {String(release_date).substring(0, 4)}\n              </StyledLinkHome>\n            )\n          )}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["OPTIONS","method","headers","accept","Authorization","setIsLoading","useSearchParams","searchParams","setSearchParams","useState","searchResults","setSearchResults","searchQuery","get","location","useLocation","useEffect","fetchSearchMovies","fetch","res","ok","json","data","Error","toast","message","then","results","length","to","onSubmit","e","preventDefault","form","currentTarget","target","elements","value","trim","search","reset","type","placeholder","autoFocus","name","style","display","flexWrap","gap","map","id","release_date","title","backdrop_path","poster_path","state","from","loading","src","NoImg","alt","width","maxWidth","String","substring"],"sourceRoot":""}