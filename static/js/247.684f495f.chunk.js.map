{"version":3,"file":"static/js/247.684f495f.chunk.js","mappings":"uKAAO,IAAMA,EAAU,CACrBC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,8N,0HCsDN,UAtDa,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACd,GAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAyBR,OAvBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,6FACxBP,GAAa,GADW,kBAGJQ,MAAM,sCAAD,OACiBJ,EADjB,2BAErBT,EAAAA,GALoB,YAGhBc,EAHgB,QAOdC,GAPc,iCAQDD,EAAIE,OARH,cAQdC,EARc,yBASbA,GATa,cAWhB,IAAIC,MAAM,SAXM,kCAatBC,QAAQC,IAAR,gBAAqB,KAAMC,QAA3B,kBAbsB,yBAetBhB,GAAa,GAfS,6EAAH,qDAmBvBO,IAAoBU,MAAK,SAAAR,GAAG,OAAIN,EAAWM,EAAIS,KAAnB,GAC7B,GAAE,CAACd,EAASJ,KAGX,eAAImB,MAAO,CAAEC,QAAS,OAAQC,IAAK,GAAIC,SAAU,QAAjD,UACU,OAAPpB,QAAO,IAAPA,OAAA,EAAAA,EAASqB,QAAS,EACjBrB,EAAQsB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACV,2BACE,gBACEC,QAAQ,OACRC,IACEF,EAAY,6CAC8BA,GACtCG,EAENC,IAAKN,EACLO,MAAO,OAET,wBAAKP,KACL,uBAAG,gBACH,wBAAKC,MAbEF,EADC,KAkBZ,uBAAG,yDAIV,C","sources":["api/api.js","components/Cast/Cast.jsx"],"sourcesContent":["export const OPTIONS = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5OWUzM2Q5ZjIwZjlhNmU0ZTcxNGU2N2FlM2JjZTdhNSIsInN1YiI6IjY0Nzg5ZjI1MDc2Y2U4MDEyOGZiY2NmMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.fgp-whkIrWAK4eHf9B-LgEQ9c39n98ES3eZ_2XSy_lo',\n  },\n};\n","import { OPTIONS } from 'api/api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport NoImg from '../../img/no-image.png';\n\nconst Cast = ({ setIsLoading }) => {\n  const [credits, setCredits] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieCredits = async () => {\n      setIsLoading(true);\n      try {\n        const res = await fetch(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\n          OPTIONS\n        );\n        if (res.ok) {\n          const data = await res.json();\n          return data;\n        }\n        throw new Error('Opps!');\n      } catch (error) {\n        console.log(`Oops! ${error.message} ðŸ˜’`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieCredits().then(res => setCredits(res.cast));\n  }, [movieId, setIsLoading]);\n\n  return (\n    <ul style={{ display: 'flex', gap: 20, flexWrap: 'wrap' }}>\n      {credits?.length > 0 ? (\n        credits.map(({ id, name, character, profile_path }) => (\n          <li key={id}>\n            <img\n              loading=\"lazy\"\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/original${profile_path}`\n                  : NoImg\n              }\n              alt={name}\n              width={200}\n            />\n            <h4>{name}</h4>\n            <p>character:</p>\n            <h5>{character}</h5>\n          </li>\n        ))\n      ) : (\n        <p>We don't have any casts for this movie ðŸ˜’</p>\n      )}\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["OPTIONS","method","headers","accept","Authorization","setIsLoading","useState","credits","setCredits","movieId","useParams","useEffect","fetchMovieCredits","fetch","res","ok","json","data","Error","console","log","message","then","cast","style","display","gap","flexWrap","length","map","id","name","character","profile_path","loading","src","NoImg","alt","width"],"sourceRoot":""}